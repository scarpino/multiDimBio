?format
timestamp<-format(Sys.time(), '%a %b %d %h %m %s')
timestamp
format(Sys.time(), '%b %d %h %m %s')
timestamp<-format(Sys.time(), '%b %d %m %s')
format(Sys.time(), '%b %d %m %s')
format(Sys.time(), '%d %m %s')
Sys.time()
format(Sys.time(), '%d %m %s')
require('pcaMethods')
q()
library(MultiDimBio)
?LandscapePlot
data(Nuclei)
data(Groups)
mu1<-0 # setting the expected value of x1#
		mu2<-0 # setting the expected value of x2#
		s11<-10 # setting the variance of x1#
		s12<-15 # setting the covariance between x1 and x2#
		s22<-10 # setting the variance of x2#
		rho<-0.5 # setting the correlation coefficient between x1 and x2#
		x1<-seq(-10,10,length=41) # generating the vector series x1#
		x2<-x1 # copying x1 to x2#
		f<-function(x1,x2){#
        			term1 <- 1/(2*pi*sqrt(s11*s22*(1-rho^2)))#
        			term2 <- -1/(2*(1-rho^2))#
        			term3 <- (x1-mu1)^2/s11#
        			term4 <- (x2-mu2)^2/s22#
        			term5 <- -2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))#
        			term1*exp(term2*(term3+term4-term5))#
		} # setting up the function of the multivariate normal density#
	M<-outer(x1,x2,f)
x2
term1 <- 1/(2*pi*sqrt(s11*s22*(1-rho^2)))
1/(2*pi*sqrt(s11*s22*(1-rho^2)))
term1
<-
term1<-1/(2*pi*sqrt(s11*s22*(1-rho^2)))
f<-function(x1,x2){#
			term1<-1/(2*pi*sqrt(s11*s22*(1-rho^2)))#
			term2<--1/(2*(1-rho^2))#
			term3<-(x1-mu1)^2/s11#
			term4<-(x2-mu2)^2/s22#
			term5<--2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))#
 			term1*exp(term2*(term3+term4-term5))#
		}
mu1<-0 # setting the expected value of x1#
		mu2<-0 # setting the expected value of x2#
		s11<-10 # setting the variance of x1#
		s12<-15 # setting the covariance between x1 and x2#
		s22<-10 # setting the variance of x2#
		rho<-0.5 # setting the correlation coefficient between x1 and x2#
		x1<-seq(-10,10,length=41) # generating the vector series x1#
		x2<-x1 # copying x1 to x2
f<-function(x1,x2){#
			term1<-1/(2*pi*sqrt(s11*s22*(1-rho^2)))#
			term2<--1/(2*(1-rho^2))#
			term3<-(x1-mu1)^2/s11#
			term4<-(x2-mu2)^2/s22#
			term5<--2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))#
 			term1*exp(term2*(term3+term4-term5))#
		} # setting up the function of the multivariate normal density#
	M<-outer(x1,x2,f)
M
GRS<-unique(Groups)#
	if(length(GRS)==0){#
		GRS<-'Group'#
		Groups<-rep(GRS,length=nrow(Data))#
		}
length(GRS)
head(Nuclei)
Data<-Nuclei[,1:6]
j=1
use.j<-which(Groups==GRS[j])#
			DAT.j<-Data[use.j,]#
			DAT.j<-as.matrix(DAT.j)#
			if(ncol(DAT.j)>1){#
			mu.j<-colMeans(DAT.j,na.rm=TRUE)#
			}else{#
				mu.j<-mean(DAT.j,na.rm=TRUE)#
				}
M.plot<-matrix(0,nrow=61*4,ncol=61*3)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[62:122,1:61]<-M*mu.j[2]#
				M.plot[62:122,123:183]<-M*mu.j[3]#
				M.plot[123:183,1:61]<-M*mu.j[4]#
				M.plot[123:183,123:183]<-M*mu.j[5]#
				M.plot[184:244,62:122]<-M*mu.j[6]#
				posx<-c(0.5,-0.3,0.3,-0.75,0,-0.75)#
				posy<-c(1,0.6,0.4,0.25,0.25,0)#
				labels<-c('1','2','3','4','5','6')
M
mu.j[1]
dim(M)
mu1<-0 # setting the expected value of x1#
		mu2<-0 # setting the expected value of x2#
		s11<-10 # setting the variance of x1#
		s12<-15 # setting the covariance between x1 and x2#
		s22<-10 # setting the variance of x2#
		rho<-0.5 # setting the correlation coefficient between x1 and x2#
		x1<-seq(-10,10,length=61) # generating the vector series x1#
		x2<-x1 # copying x1 to x2#
		f<-function(x1,x2){#
			term1<-1/(2*pi*sqrt(s11*s22*(1-rho^2)))#
			term2<--1/(2*(1-rho^2))#
			term3<-(x1-mu1)^2/s11#
			term4<-(x2-mu2)^2/s22#
			term5<--2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))#
 			term1*exp(term2*(term3+term4-term5))#
		} # setting up the function of the multivariate normal density#
	M<-outer(x1,x2,f)
M.plot<-matrix(0,nrow=61*4,ncol=61*3)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[62:122,1:61]<-M*mu.j[2]#
				M.plot[62:122,123:183]<-M*mu.j[3]#
				M.plot[123:183,1:61]<-M*mu.j[4]#
				M.plot[123:183,123:183]<-M*mu.j[5]#
				M.plot[184:244,62:122]<-M*mu.j[6]#
				posx<-c(0.5,-0.3,0.3,-0.75,0,-0.75)#
				posy<-c(1,0.6,0.4,0.25,0.25,0)#
				labels<-c('1','2','3','4','5','6')
persp(eq(0, 1, length.out = nrow(Z)),seq(0, 1, length.out = nrow(Z)),Z,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
persp(seq(0, 1, length.out = nrow(Z)),seq(0, 1, length.out = nrow(Z)),Z,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
persp(seq(0, 1, length.out = nrow(M)),seq(0, 1, length.out = nrow(M)),M,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
dim(M.plot)
seq(0, 1, length.out = nrow(M.plot))
M.plot
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
is(M.plot)
is(M)
MA<-cbind(M*mu.j[1],M*mu.j[2])#
				MB<-cbind(M*mu.j[3],M*mu.j[4])#
				M.plot<-rbind(MA,MB)#
				posx<-c(-0.5,0.75,-1,0.2)#
				posy<-c(1,0.75,0,-0.5)#
				labels<-c('1','2','3','4')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
text(posx,posy,labels)
posx
posy
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='white',border='#969696',theta=75,r=1,phi=30)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='white',border='white',theta=75,r=1,phi=30)
text(posx,posy,labels)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=TRUE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
seq(0, 1, length.out = nrow(M.plot))
posx
posy
?persp
M.plot<-matrix(0,nrow=61*2,ncol=61*3)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[62:122,1:61]<-M*mu.j[2]#
				M.plot[62:122,123:183]<-M*mu.j[3]#
				posx<-c(0.5,-0.75,0.5)#
				posy<-c(0.5,0,-0.15)#
				labels<-c('1','2','3')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=TRUE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
?persp
dim(M.plot)
122-182
ncol(M.plot)
test<-matrix(,ncol=(122-183),nrow=183)
test<-matrix(,ncol=(183-12),nrow=183)
M.plot<-cbind(test,M.plot)
nrow(test)
nrow(M.plot)
dim(M.plot)
ncol(N.plot)
test<-matrix(,ncol=183,nrow=(183-122))
M.plot<-cbind(test,M.plot)
nrow(test)
M.plot<-rbind(test,M.plot)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=TRUE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
Data<-Nuclei[,1:9]
use.j<-which(Groups==GRS[j])#
			DAT.j<-Data[use.j,]#
			DAT.j<-as.matrix(DAT.j)#
			if(ncol(DAT.j)>1){#
			mu.j<-colMeans(DAT.j,na.rm=TRUE)#
			}else{#
				mu.j<-mean(DAT.j,na.rm=TRUE)#
				}
M.plot<-M*mu.j#
				posx<-c(0)#
				posy<-c(0.5)#
				labels<-c('1')
M.plot<-M*mu.j[1]#
				posx<-c(0)#
				posy<-c(0.5)#
				labels<-c('1')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
MA<-cbind(M*0,M*mu.j[2])#
				MB<-cbind(M*mu.j[2],M*0)#
				M.plot<-rbind(MA,MB)#
				posx<-c(0.75,-0.75)#
				posy<-c(1,0.5)#
				labels<-c('1','2')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
M.plot<-matrix(0,nrow=61*2,ncol=61*3)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[62:122,1:61]<-M*mu.j[2]#
				M.plot[62:122,123:183]<-M*mu.j[3]#
				posx<-c(0.5,-0.75,0.5)#
				posy<-c(0.5,0,-0.15)#
				labels<-c('1','2','3')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
dim(M.plot)
183-122
M.plot<-rbind(M.plot,M.fill)
M.fill<-matrix(,ncol=183,nrow=61)
M.plot<-rbind(M.plot,M.fill)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
M.plot<-rbind(M.fill,M.plot)
M.plot<-matrix(0,nrow=61*2,ncol=61*3)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[62:122,1:61]<-M*mu.j[2]#
				M.plot[62:122,123:183]<-M*mu.j[3]#
				M.fill<-matrix(,ncol=183,nrow=61)#
				M.plot<-rbind(M.fill,M.plot)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
MA<-cbind(M*mu.j[1],M*mu.j[2])#
				MB<-cbind(M*mu.j[3],M*mu.j[4])#
				M.plot<-rbind(MA,MB)#
				posx<-c(-0.5,0.75,-1,0.2)#
				posy<-c(1,0.75,0,-0.5)#
				labels<-c('1','2','3','4')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
M.plot<-matrix(0,nrow=61*3,ncol=61*3)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[62:122,1:61]<-M*mu.j[2]#
				M.plot[62:122,123:183]<-M*mu.j[3]#
				M.plot[123:183,1:61]<-M*mu.j[4]#
				M.plot[123:183,123:183]<-M*mu.j[5]#
				posx<-c(0.5,-0.3,0.3,-0.75,0)#
				posy<-c(1,0.4,0.4,0,0)#
				labels<-c('1','2','3','4','5')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
M.plot<-matrix(0,nrow=61*4,ncol=61*3)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[62:122,1:61]<-M*mu.j[2]#
				M.plot[62:122,123:183]<-M*mu.j[3]#
				M.plot[123:183,1:61]<-M*mu.j[4]#
				M.plot[123:183,123:183]<-M*mu.j[5]#
				M.plot[184:244,62:122]<-M*mu.j[6]#
				posx<-c(0.5,-0.3,0.3,-0.75,0,-0.75)#
				posy<-c(1,0.6,0.4,0.25,0.25,0)#
				labels<-c('1','2','3','4','5','6')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
dim(M.plot)
244-183
M.fill<-matrix(,ncol=61,nrow=244)
M.plot<-cbind(M.fill,M.plot)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
M.plot<-matrix(0,nrow=61*4,ncol=61*5)#
				M.plot[1:61,123:183]<-M*mu.j[1]#
				M.plot[62:122,62:122]<-M*mu.j[2]#
				M.plot[62:122,184:244]<-M*mu.j[3]#
				M.plot[123:183,1:61]<-M*mu.j[4]#
				M.plot[123:183,245:305]<-M*mu.j[5]#
				M.plot[184:244,62:122]<-M*mu.j[6]#
				M.plot[184:244,184:244]<-M*mu.j[7]#
				posx<-c(0.5,-0.3,0.5,-0.75,0.75,-0.75,0.2)#
				posy<-c(0.6,0.4,0.25,0.25,-0.2,-0.1,-0.65)#
				labels<-c('1','2','3','4','5','6','7')
dim(M.plot)
M.fill<-matrix(,ncol=244,nrow=61)
M.plot<-rbind(M.fill,M.plot)
M.fill<-matrix(,ncol=305,nrow=61)
M.plot<-rbind(M.fill,M.plot)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
M.plot<-matrix(0,nrow=61*4,ncol=61*4)#
				M.plot[1:61,62:122]<-M*mu.j[1]#
				M.plot[1:61,123:183]<-M*mu.j[2]#
				M.plot[62:122,1:61]<-M*mu.j[3]#
				M.plot[62:122,184:244]<-M*mu.j[4]#
				M.plot[123:183,1:61]<-M*mu.j[5]#
				M.plot[123:183,184:244]<-M*mu.j[6]#
				M.plot[184:244,62:122]<-M*mu.j[7]#
				M.plot[184:244,123:183]<-M*mu.j[8]#
				posx<-c(0.2,0.6,-0.3,0.7,-0.75,0.75,-0.75,-0.1)#
				posy<-c(0.5,0.5,0.4,0,0.25,-0.35,-0.1,-0.2)#
				labels<-c('1','2','3','4','5','6','7','8')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
M.plot<-matrix(0,nrow=61*5,ncol=61*6)#
				M.plot[1:61,184:244]<-M*mu.j[1]#
				M.plot[62:122,62:122]<-M*mu.j[2]#
				M.plot[62:122,245:305]<-M*mu.j[3]#
				M.plot[123:183,1:61]<-M*mu.j[4]#
				M.plot[123:183,306:366]<-M*mu.j[5]#
				M.plot[184:244,62:122]<-M*mu.j[6]#
				M.plot[184:244,245:305]<-M*mu.j[7]#
				M.plot[245:305,123:183]<-M*mu.j[8]#
				M.plot[245:305,184:244]<-M*mu.j[9]#
				posx<-c(0.6,-0.3,0.6,-0.75,0.75,-0.75,0.4,-0.75,-0.1)#
				posy<-c(0.5,0.4,0.1,0.25,-0.35,-0.1,-0.45,-0.2,-0.3)#
				labels<-c('1','2','3','4','5','6','7','8','9')
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
dim(M.plot)
M.fill<-matrix(,ncol=366,nrow=61)
M.plot<-cbind(M.fill,M.plot)
M.plot<-rbind(M.fill,M.plot)
persp(seq(0, 1, length.out = nrow(M.plot)),seq(0, 1, length.out = nrow(M.plot)),M.plot,box=FALSE,col='#F0F0F0',border='#969696',theta=75,r=1,phi=30)
drawScene(surfaceTriangles(1:nrow(M.plot),1:ncol(M.plot),M.plot, color='gray'),screen=SCREEN)
?drawScene
drawScene(surfaceTriangles(1:nrow(M.plot),1:ncol(M.plot),M.plot, color='gray'),screen=list(z = 40, x = -60))
text(posx,posy,labels)
quit()
dat.i<-data.frame(rnorm(100),rnorm(100))
library(ggplot2)
colnames(dat.i)<-c('t1','t2')
p<-ggplot(aes(dat.i$t2,dat.i$t2))
dat<-dat
dat<-dat.i
p<-ggplot(aes(dat$t1,dat$t2))
is(dat$t1)
?ggplot
q()
binomPower<-function(ndads,mm,vv,tau2,nperms,nsims,nbins,doPlot=FALSE){#
	getP<-funcion(ndads,mm,vv,tau2,nperms, nsims, nbins){#
		ps<-c()#
		for(i in 1:nsims){#
			p.i<-simPower(ndads, mm, vv, tau2, nperms, nbins)#
			ps<-c(ps,p.i)#
		}#
			return(ps)#
		}#end getP#
	#power analysis code#
	params<-expand.grid(tau2,ndads,mm,vv)#
	colnames(params)<-c('tau2','ndads','mm','vv')#
	rm<-which(params$vv<params$mm)#
	if(length(rm)>0){#
		params<-params[-rm,]#
	}#
	tstamp<-as.character(as.integer(Sys.time()))#
	write.csv(params,file=paste0('simPowerParams','_',tstamp,'.csv'),row.names=FALSE)#
	ptest<-vector("list",nrow(params))#
	out<-c()#
	for(i in 1:nrow(params)){#
		ptest.i<-getP(ndads=params$ndads[i], mm=params$mm[i], vv=params$vv[i], tau2=params$tau2[i], nperms=nperms=nperms,nsims=nsims,nbins=3)#
		ptest[[i]]<-ptest.i#
		out<-c(out,ptest.i)#
	}#
	out.save<-matrix(out,ncol=nsims,byrow=TRUE)#
	write.csv(out.save,file=paste0(tstamp,'.csv'),row.names=FALSE)#
	rejectM0<-function(x){#
		return(length(which(x<0.05)))#
	}#
	reject<-apply(out.save,1,rejectM0)#
	reject<-reject/nsims#
	trueM0<-which(params$tau2[1:length(reject)]==0)#
	trueM1<-(1:length(reject))[-trueM0]#
	falseP<-rep(NA, length(reject))#
	falseP[trueM0]<-reject[trueM0]#
	falseP[trueM1]<-1-reject[trueM1]#
	trueP<-1-falseP#
	dat.plot<-data.frame(falseP,trueP, params$ndads[1:length(reject)], params$tau2[1:length(reject)])#
	colnames(dat.plot)<-c('falseP','trueP','ndads','trueTau2')#
	dat.plot$group<-paste0('trueTau2',':',dat.plot$trueTau,'-','nDads',':',dat.plot$ndads)#
	dat.plot$trueTau<-as.factor(dat.plot$trueTau)#
	dat.plot$ndads<-as.factor(dat.plot$ndads)#
	write.csv(dat.plot,paste0('roc','_',tstamp,'.csv') ,row.names=FALSE)#
	if(doPlot==TRUE){#
		plotBinomPower(dat.plot,params,tstamp)#
	}#
	out<-list('roc'=dat.plot,'params'=params,'results'=out.save)#
	return(out)#
}
getP<-funcion(ndads,mm,vv,tau2,nperms, nsims, nbins){#
		ps<-c()#
		for(i in 1:nsims){#
			p.i<-simPower(ndads, mm, vv, tau2, nperms, nbins)#
			ps<-c(ps,p.i)#
		}#
			return(ps)#
		}#end getP
binomPower<-function(ndads,mm,vv,tau2,nperms,nsims,nbins,doPlot=FALSE){#
	getP<-function(ndads,mm,vv,tau2,nperms, nsims, nbins){#
		ps<-c()#
		for(i in 1:nsims){#
			p.i<-simPower(ndads, mm, vv, tau2, nperms, nbins)#
			ps<-c(ps,p.i)#
		}#
			return(ps)#
		}#end getP#
	#power analysis code#
	params<-expand.grid(tau2,ndads,mm,vv)#
	colnames(params)<-c('tau2','ndads','mm','vv')#
	rm<-which(params$vv<params$mm)#
	if(length(rm)>0){#
		params<-params[-rm,]#
	}#
	tstamp<-as.character(as.integer(Sys.time()))#
	write.csv(params,file=paste0('simPowerParams','_',tstamp,'.csv'),row.names=FALSE)#
	ptest<-vector("list",nrow(params))#
	out<-c()#
	for(i in 1:nrow(params)){#
		ptest.i<-getP(ndads=params$ndads[i], mm=params$mm[i], vv=params$vv[i], tau2=params$tau2[i], nperms=nperms=nperms,nsims=nsims,nbins=3)#
		ptest[[i]]<-ptest.i#
		out<-c(out,ptest.i)#
	}#
	out.save<-matrix(out,ncol=nsims,byrow=TRUE)#
	write.csv(out.save,file=paste0(tstamp,'.csv'),row.names=FALSE)#
	rejectM0<-function(x){#
		return(length(which(x<0.05)))#
	}#
	reject<-apply(out.save,1,rejectM0)#
	reject<-reject/nsims#
	trueM0<-which(params$tau2[1:length(reject)]==0)#
	trueM1<-(1:length(reject))[-trueM0]#
	falseP<-rep(NA, length(reject))#
	falseP[trueM0]<-reject[trueM0]#
	falseP[trueM1]<-1-reject[trueM1]#
	trueP<-1-falseP#
	dat.plot<-data.frame(falseP,trueP, params$ndads[1:length(reject)], params$tau2[1:length(reject)])#
	colnames(dat.plot)<-c('falseP','trueP','ndads','trueTau2')#
	dat.plot$group<-paste0('trueTau2',':',dat.plot$trueTau,'-','nDads',':',dat.plot$ndads)#
	dat.plot$trueTau<-as.factor(dat.plot$trueTau)#
	dat.plot$ndads<-as.factor(dat.plot$ndads)#
	write.csv(dat.plot,paste0('roc','_',tstamp,'.csv') ,row.names=FALSE)#
	if(doPlot==TRUE){#
		plotBinomPower(dat.plot,params,tstamp)#
	}#
	out<-list('roc'=dat.plot,'params'=params,'results'=out.save)#
	return(out)#
}
binomPower<-function(ndads,mm,vv,tau2,nperms,nsims,nbins,doPlot=FALSE){#
	getP<-function(ndads,mm,vv,tau2,nperms, nsims, nbins){#
		ps<-c()#
		for(i in 1:nsims){#
			p.i<-simPower(ndads, mm, vv, tau2, nperms, nbins)#
			ps<-c(ps,p.i)#
		}#
			return(ps)#
		}#end getP#
	#power analysis code#
	params<-expand.grid(tau2,ndads,mm,vv)#
	colnames(params)<-c('tau2','ndads','mm','vv')#
	rm<-which(params$vv<params$mm)#
	if(length(rm)>0){#
		params<-params[-rm,]#
	}#
	tstamp<-as.character(as.integer(Sys.time()))#
	write.csv(params,file=paste0('simPowerParams','_',tstamp,'.csv'),row.names=FALSE)#
	ptest<-vector("list",nrow(params))#
	out<-c()#
	for(i in 1:nrow(params)){#
		ptest.i<-getP(ndads=params$ndads[i], mm=params$mm[i], vv=params$vv[i], tau2=params$tau2[i], nperms=nperms,nsims=nsims,nbins=3)#
		ptest[[i]]<-ptest.i#
		out<-c(out,ptest.i)#
	}#
	out.save<-matrix(out,ncol=nsims,byrow=TRUE)#
	write.csv(out.save,file=paste0(tstamp,'.csv'),row.names=FALSE)#
	rejectM0<-function(x){#
		return(length(which(x<0.05)))#
	}#
	reject<-apply(out.save,1,rejectM0)#
	reject<-reject/nsims#
	trueM0<-which(params$tau2[1:length(reject)]==0)#
	trueM1<-(1:length(reject))[-trueM0]#
	falseP<-rep(NA, length(reject))#
	falseP[trueM0]<-reject[trueM0]#
	falseP[trueM1]<-1-reject[trueM1]#
	trueP<-1-falseP#
	dat.plot<-data.frame(falseP,trueP, params$ndads[1:length(reject)], params$tau2[1:length(reject)])#
	colnames(dat.plot)<-c('falseP','trueP','ndads','trueTau2')#
	dat.plot$group<-paste0('trueTau2',':',dat.plot$trueTau,'-','nDads',':',dat.plot$ndads)#
	dat.plot$trueTau<-as.factor(dat.plot$trueTau)#
	dat.plot$ndads<-as.factor(dat.plot$ndads)#
	write.csv(dat.plot,paste0('roc','_',tstamp,'.csv') ,row.names=FALSE)#
	if(doPlot==TRUE){#
		plotBinomPower(dat.plot,params,tstamp)#
	}#
	out<-list('roc'=dat.plot,'params'=params,'results'=out.save)#
	return(out)#
}
simPower<-function(ndads,mm,vv,tau2,nperms,nbins){#
	registerDoMC()#
	mylogit = function(x) log(x/{1-x})#
	ilogit = function(x) 1/{1+exp(-x)}#
	swimprob = ilogit(rnorm(ndads, 0, sqrt(tau2)))#
	mytable = NULL#
	for(i in 1:ndads) {#
		bincounts = pmax(1,rnbinom(nbins, mu = mm, size = mm^2/{vv-mm}))#
		swim = rbinom(3, bincounts,swimprob[i])#
		set = bincounts - swim#
		theserows = data.frame(Dad = i, Bin = 1:nbins, set=set,swim=swim)#
		mytable = rbind(mytable, theserows)#
	}#
	ncases = nrow(mytable)#
	empfreq = aggregate(swim~Dad, data=mytable, sum)[,2] / aggregate(swim+set~Dad, data=mytable, sum)[,2]#
	if(doPlot==TRUE){#
		pdf(paste0(as.numeric(Sys.time()),'_',ndads,'_',round(mm,2),'_',round(vv,2),'_',round(tau2,2),'.pdf'))#
		plot(mylogit(empfreq), 1:ndads, pch=4, col='red')#
		dev.off()#
	}#
	# Compute the likelihood ratio statistic#
	hm0 = glm(cbind(swim, set) ~ 1, data=mytable, family=binomial)#
	hm1 = glmer(cbind(swim, set) ~ (1 | Dad), data=mytable, family=binomial, REML=FALSE)#
	Dsim = as.numeric(deviance(hm0) - deviance(hm1))#
	perm1 <- foreach(i=1:nperms, .combine=c) %dopar% {#
	neworder = sample(1:ncases, ncases)#
	ptable = data.frame(Dad = mytable$Dad, Bin = mytable$Bin, swim = mytable$swim[neworder], set =mytable$set[neworder])#
	hm0 = glm(cbind(swim, set) ~ 1, data=ptable, family=binomial)#
	hm1 = glmer(cbind(swim, set) ~ (1 | Dad), data=ptable, family=binomial, REML=FALSE)#
	D = as.numeric(deviance(hm0) - deviance(hm1))#
	D;#
	}#
#
	pval<-length(which(perm1>Dsim))/length(perm1)#
	return(pval)#
}
plotBinomPower<-function(datPlotBig,params,timeStamp=Sys.time()){#
	if(length(unique(params$mm))>1){#
		stop('function does not work with more than one mean offspring number')#
	}#
	if(length(unique(params$vv))>1){#
		stop('function does not work with more than one var in offspring number')#
	}#
	#solving ggplot2 binding error#
	ndads <- NULL#
	timeStamp<-as.character(as.integer(timeStamp))#
	#preping data setss#
	datPlotBig$trueTau<-as.factor(datPlotBig$trueTau)#
	datPlotBig$ndads<-round(as.numeric(as.character(datPlotBig$ndads)))#
	datPlotBig$ndads<-round(datPlotBig$ndads,1)	#
	datPlotBig$ndads<-as.factor(datPlotBig$ndads)#
	#colors#
	cols<- colorRampPalette(c("#FFF7FB","#74A9CF","#023858"), space = "Lab")#
	pal<-cols(length(unique(datPlotBig$ndads)))#
	#######
	#plotting##
	#######
	#values h2 > 0#
	use<-which(datPlotBig$trueTau2>0)#
	dat.plot<-datPlotBig[use,]#
	#transforming variances to heritability (see emails with james scott)#
	h2<-dat.plot$trueTau2/(dat.plot$trueTau2+(pi/sqrt(3))^2)#
	auc <- dat.plot$trueP/(dat.plot$trueP+dat.plot$falseP)#
	dat.plot<-data.frame(dat.plot,h2,auc)#
	p<-ggplot(dat.plot,aes(h2,auc,colour=ndads, group=ndads))#
	p.save<-p+geom_line(size=1.5)+scale_colour_manual(values=pal)+xlab('h2')+ylab('auc')+theme(legend.position ='right', legend.key=element_rect(fill='gray'),legend.background=element_rect(fill='#ffffffaa',colour='black'),panel.background=element_rect(fill='gray',colour='black'),axis.text.y=element_text(colour='black',size=15),axis.text.x=element_text(colour='black',size=20),axis.title=element_text(colour='black',size=20), legend.key=element_rect(fill='white '),panel.grid.minor=element_line(colour='#00000050',linetype=3),panel.grid.major=element_line(colour='#00000060',linetype=3))+scale_y_continuous(expand=c(0.005,0.005))+scale_x_continuous(expand=c(0,0.003),limits=c(0,max(dat.plot$h2)))#
	ggsave(paste0('powerCurveBinom_',timeStamp,'.pdf'),p.save)#
	#values h2 == 0#
	use<-which(datPlotBig$trueTau2==0)#
	dat.plot<-datPlotBig[use,]#
	auc <- dat.plot$trueP/(dat.plot$trueP+dat.plot$falseP)#
	rownames(dat.plot)<-NULL#
	dat.plot<-data.frame(dat.plot,h2,auc)#
	vals<-by(dat.plot[,'auc'],dat.plot[,'ndads'],mean,na.rm=TRUE)#
	dat.plot<-data.frame(as.factor(as.numeric(names(vals))),unlist(vals)[1:length(vals)])#
	colnames(dat.plot)<- c('ndads','auc')#
	p1<-ggplot(dat.plot,aes(x=ndads,y=auc,fill=ndads))#
	p1.save<-p1+geom_bar(stat='identity')+scale_fill_manual(values=pal)+xlab('number of dads')+ylab('auc (true h2 = 0)')+theme(legend.position ='right', legend.key=element_rect(fill='gray'),legend.background=element_rect(fill='#ffffffaa',colour='black'),panel.background=element_rect(fill='gray',colour='black'),axis.text.y=element_text(colour='black',size=15),axis.text.x=element_text(colour='black',size=20),axis.title=element_text(colour='black',size=20), legend.key=element_rect(fill='white '),panel.grid.minor=element_line(colour='#00000050',linetype=3),panel.grid.major=element_line(colour='#00000060',linetype=3))+scale_y_continuous(expand=c(0,0),limits=c(0,1))+scale_x_discrete(expand=c(0.01,0.01))#
	ggsave(paste0('powerTrue_h2_equal_0_Binom_',timeStamp,'.pdf'),p1.save)#
}
binomPower<-function(ndads,mm,vv,tau2,nperms,nsims,nbins,doPlot=FALSE){#
	getP<-function(ndads,mm,vv,tau2,nperms, nsims, nbins){#
		ps<-c()#
		for(i in 1:nsims){#
			p.i<-simPower(ndads, mm, vv, tau2, nperms, nbins)#
			ps<-c(ps,p.i)#
		}#
			return(ps)#
		}#end getP#
	#power analysis code#
	params<-expand.grid(tau2,ndads,mm,vv)#
	colnames(params)<-c('tau2','ndads','mm','vv')#
	rm<-which(params$vv<params$mm)#
	if(length(rm)>0){#
		params<-params[-rm,]#
	}#
	tstamp<-as.character(as.integer(Sys.time()))#
	write.csv(params,file=paste0('simPowerParams','_',tstamp,'.csv'),row.names=FALSE)#
	ptest<-vector("list",nrow(params))#
	out<-c()#
	for(i in 1:nrow(params)){#
		ptest.i<-getP(ndads=params$ndads[i], mm=params$mm[i], vv=params$vv[i], tau2=params$tau2[i], nperms=nperms,nsims=nsims,nbins=3)#
		ptest[[i]]<-ptest.i#
		out<-c(out,ptest.i)#
	}#
	out.save<-matrix(out,ncol=nsims,byrow=TRUE)#
	write.csv(out.save,file=paste0(tstamp,'.csv'),row.names=FALSE)#
	rejectM0<-function(x){#
		return(length(which(x<0.05)))#
	}#
	reject<-apply(out.save,1,rejectM0)#
	reject<-reject/nsims#
	trueM0<-which(params$tau2[1:length(reject)]==0)#
	trueM1<-(1:length(reject))[-trueM0]#
	falseP<-rep(NA, length(reject))#
	falseP[trueM0]<-reject[trueM0]#
	falseP[trueM1]<-1-reject[trueM1]#
	trueP<-1-falseP#
	dat.plot<-data.frame(falseP,trueP, params$ndads[1:length(reject)], params$tau2[1:length(reject)])#
	colnames(dat.plot)<-c('falseP','trueP','ndads','trueTau2')#
	dat.plot$group<-paste0('trueTau2',':',dat.plot$trueTau,'-','nDads',':',dat.plot$ndads)#
	dat.plot$trueTau<-as.factor(dat.plot$trueTau)#
	dat.plot$ndads<-as.factor(dat.plot$ndads)#
	write.csv(dat.plot,paste0('roc','_',tstamp,'.csv') ,row.names=FALSE)#
	if(doPlot==TRUE){#
		plotBinomPower(dat.plot,params,tstamp)#
	}#
	out<-list('roc'=dat.plot,'params'=params,'results'=out.save)#
	return(out)#
}
binomPower(ndads=9,mm=4.629634, vv= 6.31339,tau2=c(0,1,2),nperms=10,nsims=10,nbins=3,doPlot=TRUE)
library(foreach)
library(doMC)
binomPower(ndads=9,mm=4.629634, vv= 6.31339,tau2=c(0,1,2),nperms=10,nsims=10,nbins=3,doPlot=TRUE)
simPower<-function(ndads,mm,vv,tau2,nperms,nbins){#
	registerDoMC()#
	mylogit = function(x) log(x/{1-x})#
	ilogit = function(x) 1/{1+exp(-x)}#
	swimprob = ilogit(rnorm(ndads, 0, sqrt(tau2)))#
	mytable = NULL#
	for(i in 1:ndads) {#
		bincounts = pmax(1,rnbinom(nbins, mu = mm, size = mm^2/{vv-mm}))#
		swim = rbinom(3, bincounts,swimprob[i])#
		set = bincounts - swim#
		theserows = data.frame(Dad = i, Bin = 1:nbins, set=set,swim=swim)#
		mytable = rbind(mytable, theserows)#
	}#
	ncases = nrow(mytable)#
	empfreq = aggregate(swim~Dad, data=mytable, sum)[,2] / aggregate(swim+set~Dad, data=mytable, sum)[,2]#
	# Compute the likelihood ratio statistic#
	hm0 = glm(cbind(swim, set) ~ 1, data=mytable, family=binomial)#
	hm1 = glmer(cbind(swim, set) ~ (1 | Dad), data=mytable, family=binomial, REML=FALSE)#
	Dsim = as.numeric(deviance(hm0) - deviance(hm1))#
	perm1 <- foreach(i=1:nperms, .combine=c) %dopar% {#
	neworder = sample(1:ncases, ncases)#
	ptable = data.frame(Dad = mytable$Dad, Bin = mytable$Bin, swim = mytable$swim[neworder], set =mytable$set[neworder])#
	hm0 = glm(cbind(swim, set) ~ 1, data=ptable, family=binomial)#
	hm1 = glmer(cbind(swim, set) ~ (1 | Dad), data=ptable, family=binomial, REML=FALSE)#
	D = as.numeric(deviance(hm0) - deviance(hm1))#
	D;#
	}#
#
	pval<-length(which(perm1>Dsim))/length(perm1)#
	return(pval)#
}
binomPower(ndads=9,mm=4.629634, vv= 6.31339,tau2=c(0,1,2),nperms=10,nsims=10,nbins=3,doPlot=TRUE)
library(lmed4)
library(lme4)
binomPower(ndads=9,mm=4.629634, vv= 6.31339,tau2=c(0,1,2),nperms=10,nsims=10,nbins=3,doPlot=TRUE)
library(ggplot2)
warnings()
binomPower(ndads=9,mm=4.629634, vv= 6.31339,tau2=c(0,1,2),nperms=10,nsims=10,nbins=3,doPlot=TRUE)
q()
library(foreach)
?dopar
??dopar
?registerDoParallel
library(parallel)
?registerDoParallel
??parllele
??parllel
??register
installed.packages()
head(installed.packages())
installed.packages()$Package
installed.packages()[,'Package']
is.element('doMC', installed.packages()[,'Package'])
if(is.element('doMC', installed.packages()[,'Package'])){#
		registerDoMC()#
	}else{#
		registerDoSeq()#
	}
if(is.element('doMC', installed.packages()[,'Package'])){#
		require('doMC')#
		registerDoMC()#
	}else{#
		registerDoSeq()#
	}
q()
